generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar
  created_at DateTime @db.Timestamp(6)
}

model donations {
  id            Int      @id @default(autoincrement())
  user_id       Int?
  item_id       Int?
  qty_purchased Int?
  created_at    DateTime @db.Timestamp(6)
}

model events {
  id              Int            @id @default(autoincrement())
  organization_id Int?
  name            String         @db.VarChar
  start_date      DateTime       @db.Timestamp(6)
  end_date        DateTime       @db.Timestamp(6)
  location        String?        @db.VarChar
  organizations   organizations? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model items {
  id            Int      @id @default(autoincrement())
  event_id      Int?
  name          String   @db.VarChar
  wishlist_item Boolean?
  qty_needed    Int?
  category_id   Int?
}

model organizations {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar
  email  String?  @db.VarChar
  phone  String?  @db.VarChar
  city   String?  @db.VarChar
  state  String?  @db.VarChar
  events events[]
}

model users {
  id                 Int     @id @default(autoincrement())
  name               String  @db.VarChar
  email              String  @db.VarChar
  encrypted_password String  @db.VarChar
  zip_code           String? @db.VarChar
}
